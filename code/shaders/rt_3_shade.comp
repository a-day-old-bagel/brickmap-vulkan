#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

#include "common_variables.glsl"
#include "common_random.glsl"
#include "common_brickmap.glsl"
#include "common_raytrace.glsl"
#include "common_sunsky.glsl"

layout (std430, set = 0, binding = 0) buffer ray_buffer
{
	ray rays[]; 
};

layout (std430, set = 0, binding = 1) buffer ray_buffer_next
{
	ray rays_next[]; 
};

layout (std430, set = 1, binding = 0) buffer globals_buffer
{
    uint start_position;
    uint primary_ray_count;
    uint shadow_ray_count;
    uint ray_number_primary;
    uint ray_number_extend;
    uint ray_number_shade;
    uint ray_number_connect;
    uint ray_queue_buffer_size;
};

layout (std430, set = 1, binding = 1) buffer shadow_buffer
{
	shadow_ray shadow_rays[]; 
};

layout (set = 2, binding = 0) buffer blit_buffer
{
    vec4 colors[];
};

layout (std430, set = 3, binding = 0 ) buffer world_config
{
	int grid_size;
	int grid_height;
	int chunk_size;
	int chunk_count;
	ivec4 world_size;
	int cells;
	int cells_height;
	int lod_distance_8x8x8;
	int lod_distance_2x2x2;
};

layout (push_constant) uniform push_constants
{
    // Ray Gen Properties
    uint frame;
    uint render_width;
    uint render_height;
    uint pad_0;

    // Camera Properties
    vec4 camera_direction;
    vec4 camera_up;
    vec4 camera_right;
    vec4 camera_position;
    float focal_distance;
    float lens_radius;
    uint enable_depth_of_field;
    uint render_mode;
    vec2 sun_position;
};

void fisvad_onb( vec3 n, out vec3 b1, out vec3 b2 )
{
	if ( n.z < -0.9999999f )
	{
		b1 = vec3(  0.0f, -1.0f, 0.0f );
		b2 = vec3( -1.0f, 0.0f, 0.0f );
		return;
	}

	const float a = 1.0f / (1.0f + n.z);
	const float b = -n.x*n.y*a;
	b1 = vec3( 1.0f - n.x*n.x*a, b, -n.x) ;
	b2 = vec3( b, 1.0f - n.y*n.y*a, -n.y );
}

//https://graphics.pixar.com/library/OrthonormalB/paper.pdf
void revised_onb( vec3 n, out vec3 b1, out vec3 b2 )
{
	if ( n.z < 0.f )
	{
		const float a = 1.0f / (1.0f - n.z);
		const float b = n.x * n.y * a;
		b1 = vec3(1.0f - n.x * n.x * a, -b, n.x);
		b2 = vec3(b, n.y * n.y*a - 1.0f, -n.y);
	}
	else
	{
		const float a = 1.0f / (1.0f + n.z);
		const float b = -n.x * n.y * a;
		b1 = vec3(1.0f - n.x * n.x * a, b, -n.x);
		b2 = vec3(b, 1.0f - n.y * n.y * a, -n.y);
	}
}

void main()
{
	const uint index = atomicAdd( ray_number_shade, 1 );
	if ( index > ray_queue_buffer_size - 1 )
	{
		return;
	}

	ray r = rays[index];

		vec2 sun_position = vec2( 0.05, 0.1 );
		vec3 sun_direction = normalize( fromSpherical( ( sun_position - vec2(0.0, 0.5)) * vec2(6.28f, 3.14f)));
		float sun_size = 1.5;
		float sun_angular = cos(sun_size * PI / 180.f);

	uint seed = 0;//( frame * r.pixel_index * 147565741 ) * 720898027 * index;

	if ( r.distance < VERY_FAR && r.distance > 0 )
	{
		if ( render_mode > 1 )
		{
			return;
		}
		
		r.origin += r.direction * r.distance;
		//Prevent self-intersection
		r.origin += r.normal * normal_displacement;

		vec3 color = vec3( 1.f );
		if ( r.origin.z > grid_height * 0.80f )
		{
		}
		else if ( r.origin.z > grid_height * 0.4f )
		{
			color *= vec3(0.6f);
		}
		else if ( r.origin.z > grid_height * 0.2f )
		{
			color *= vec3(0.5f, 1.f, 0.5f);
		}
		else
		{
			color *= vec3(0.5f, 0.5f, 1.f);
		}

		r.throughput *= vec4( color, 1 );

		// Generate new shadow ray
		vec3 sun_sample_dir = getConeSample(sun_direction, 1.0f - sun_angular, seed);
		float sun_light = dot( r.normal.xyz, sun_sample_dir );
		if ( sun_light > 0.f )
		{ // < 0.f means sun is behind the surface
			uint shadow_index = atomicAdd( shadow_ray_count, 1 );
			shadow_rays[shadow_index] = shadow_ray( r.origin, vec4( sun_sample_dir, 1 ), vec4(r.throughput.xyz * sun(sun_sample_dir,sun_direction,sun_angular) * sun_light * 1E-5f,1), r.pixel_index, 5, 6, 7 );
		}

		if ( r.bounces < 1/*MAX_BOUNCES*/ )
		{
			
#if 0 // Stratified sampling.
			vec2 samples = random_2d_stratified_sample( seed ); 
			float r1 = 2.f * PI * samples.x;
			float r2 = samples.y;
#else
			float r1 = 2.f * PI * random_float( seed );
			float r2 = random_float( seed );
#endif
			float r2s = sqrt( r2 );

			// Transform to hemisphere coordinate system.
			vec3 u, v;
			revised_onb( r.normal.xyz, u, v );

			// Get sample on hemisphere
			vec3 ray_direction = normalize( u * cos(r1) * r2s + v * sin(r1) * r2s + r.normal.xyz * sqrt( 1 - r2 ) );
			ray_direction.x = abs( ray_direction.x ) > epsilon ? ray_direction.x : ( ray_direction.x >= 0 ? epsilon : -epsilon );
			ray_direction.y = abs( ray_direction.y ) > epsilon ? ray_direction.y : ( ray_direction.y >= 0 ? epsilon : -epsilon );
		    ray_direction.z = abs( ray_direction.z ) > epsilon ? ray_direction.z : ( ray_direction.z >= 0 ? epsilon : -epsilon );
			r.direction = vec4( ray_direction, 1.f );
			
			r.bounces++;
			uint primary_index = atomicAdd( primary_ray_count, 1 );
			rays_next[primary_index] = r;
		}
//		else
//		{
//			color = r.throughput.xyz * (r.bounces == 0 ? sunsky(r.direction.xyz,sun_direction,sun_angular) : sky(r.direction.xyz,sun_direction));
//			colors[r.pixel_index] = vec4(color,1);
//		}
	} 

	// NOTHING HIT
	// Don't generate new extended ray. Directly add emmisivity of sun/sky.

	vec3 color = r.throughput.xyz * (r.bounces == 0 ? sunsky(r.direction.xyz,sun_direction,sun_angular) : sky(r.direction.xyz,sun_direction));
	colors[r.pixel_index] = vec4(color,1);
}