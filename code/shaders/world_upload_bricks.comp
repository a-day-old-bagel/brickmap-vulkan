#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_debug_printf : enable
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

#include "common_brickmap.glsl"
#include "common_raytrace.glsl"

layout (std430, set = 0, binding = 0) buffer bricks_load_queue
{
	brick bricks_queue[brick_load_queue_size]; 
};

layout (std430, set = 0, binding = 1) buffer indices_load_queue
{
	uint indices_queue[brick_load_queue_size]; 
};

layout (std430, set = 0, binding = 2) buffer brick_load_queue
{
	uint load_queue_count;
	uint padlq1;
	uint padlq2;
	uint padlq3;
	ivec4 bricks_to_load[brick_load_queue_size];
};

layout( buffer_reference, std430 ) buffer chunk_bricks
{
    brick bricks[];
};

layout( buffer_reference, std430 ) buffer chunk_indices
{
    uint indices[];
};

layout (std430, set = 0, binding = 3 ) buffer supergrid
{
    chunk_indices index_buf_pointers[world_size];
    chunk_bricks brick_buf_pointers[world_size];
};

void main()
{
	uint queue_index = gl_GlobalInvocationID.x;

	brick new_brick = bricks_queue[queue_index];
	uint new_index = indices_queue[queue_index];	
	uint brick_index = new_index & brick_index_bits;

	ivec3 pos = bricks_to_load[queue_index].xyz;
	int chunk_index = pos.x / chunk_size + (pos.y / chunk_size) * supergrid_xy + (pos.z / chunk_size) * supergrid_xy * supergrid_xy;
	uint index_of_index = (pos.x % chunk_size) + (pos.y % chunk_size) * chunk_size + (pos.z % chunk_size) * chunk_size * chunk_size;

    chunk_bricks cb = brick_buf_pointers[chunk_index];
    cb.bricks[brick_index] = new_brick;

    chunk_indices di = index_buf_pointers[chunk_index];
    di.indices[index_of_index] = new_index;

}
